/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package myminesweeper;

import java.awt.Dimension;
import java.awt.Point;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.stream.Stream;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.border.BevelBorder;
import org.netbeans.lib.awtextra.AbsoluteConstraints;

/**
 *
 * @author willi
 */
public class Board extends javax.swing.JFrame {

    public final int N_ROWS = 30;
    public final int N_COLS = 16;
    public final int CELL_SIZE = 25;
    
    private final String MENSAGEM_MINAS = "Minas Restantes: ";
    private final int MINES_QTY = 150;
    private int remainingMines;
    
    private final String MENSAGEM_COINS = "GoldCoins: ";
    private final int POINT_COST = 3;
    private int successfulGuesses = 0;
    private int goldCoins = 0;
    
    private final StopTimer relogio;
    private BoardMap boardMap;
    
    private boolean gameOver;
    private boolean gameStarted;
    private boolean primeiroClique;
    
    /**
     * Creates new form Board
     */
    public Board() {
        initComponents();
        this.remainingMines = MINES_QTY;
        this.gameOver = true;
        this.gameStarted = false;
        this.primeiroClique = true;
        relogio = new StopTimer(this.jlabTempo);
    }

    public void addSuccesfulGuess(int val) {
        if (successfulGuesses + val == 10) {
            addGoldCoins(1);
            successfulGuesses = 0;
        } else {
            successfulGuesses += val;
        }
    }
    
    public void addGoldCoins(int val) {
        goldCoins += val;
        showGoldCoins();
    }
    
    private void showGoldCoins() {
        jlabGoldCoins.setText(MENSAGEM_COINS + String.valueOf(goldCoins));
    }
    
    public void setRemainingMines(boolean reduce) {
        if (reduce)
            jlabMinas.setText(jlabMinas.getName() + String.valueOf(--remainingMines));
        else 
            jlabMinas.setText(jlabMinas.getName() + String.valueOf(++remainingMines));
    }
    
    public void setGameOver(boolean val) {
        this.gameOver = val;
        if (val) {
            relogio.parar();
        }
    }
    
    public boolean isGameOn() {
        return !this.gameOver && this.gameStarted;
    }
    
    public boolean isGameOver() {
        return this.gameOver;
    }
    
    public boolean hasGameStarted() {
        return this.gameStarted;
    }
    
    public boolean isFirstClick() {
        return this.primeiroClique;
    }
    
    public void setFirstClick(boolean val) {
        this.primeiroClique = val;
    }
    
    public void setGameStarted(boolean val) {
        this.gameStarted = val;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton4 = new javax.swing.JButton();
        jpanMineField = new javax.swing.JPanel();
        jpanStatusBar = new javax.swing.JPanel();
        jlabMinas = new javax.swing.JLabel();
        jlabGoldCoins = new javax.swing.JLabel();
        jlabTempo = new javax.swing.JLabel();
        jmnbMenu = new javax.swing.JMenuBar();
        jmnJogo = new javax.swing.JMenu();
        jmniNovo = new javax.swing.JMenuItem();
        jsSeparador1 = new javax.swing.JPopupMenu.Separator();
        jmniSair = new javax.swing.JMenuItem();

        jButton4.setText("jButton4");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(777, 470));
        setName("Board"); // NOI18N
        setPreferredSize(new java.awt.Dimension(777, 500));
        setSize(new java.awt.Dimension(777, 500));

        jpanMineField.setMinimumSize(new java.awt.Dimension(777, 408));
        jpanMineField.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jpanStatusBar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jpanStatusBar.setMinimumSize(new java.awt.Dimension(700, 30));
        jpanStatusBar.setPreferredSize(new java.awt.Dimension(777, 30));
        jpanStatusBar.setLayout(new java.awt.GridLayout(1, 3, 5, 0));

        jlabMinas.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jlabMinas.setText("Minas Restantes: 0");
        jlabMinas.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        jlabMinas.setName("Minas Restantes: "); // NOI18N
        jpanStatusBar.add(jlabMinas);

        jlabGoldCoins.setBackground(new java.awt.Color(153, 153, 153));
        jlabGoldCoins.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jlabGoldCoins.setForeground(new java.awt.Color(255, 153, 51));
        jlabGoldCoins.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlabGoldCoins.setText("GoldCoins: 0");
        jpanStatusBar.add(jlabGoldCoins);

        jlabTempo.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jlabTempo.setText("Tempo Transcorrido: 0:00");
        jlabTempo.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 20));
        jlabTempo.setName("Tempo Transcorrido: "); // NOI18N
        jpanStatusBar.add(jlabTempo);

        jmnJogo.setText("Jogo");

        jmniNovo.setText("Novo");
        jmniNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmniNovoActionPerformed(evt);
            }
        });
        jmnJogo.add(jmniNovo);
        jmnJogo.add(jsSeparador1);

        jmniSair.setText("Sair");
        jmniSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmniSairActionPerformed(evt);
            }
        });
        jmnJogo.add(jmniSair);

        jmnbMenu.add(jmnJogo);

        setJMenuBar(jmnbMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpanStatusBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jpanMineField, javax.swing.GroupLayout.PREFERRED_SIZE, 777, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jpanMineField, javax.swing.GroupLayout.PREFERRED_SIZE, 408, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jpanStatusBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jmniSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmniSairActionPerformed
        this.dispose();
    }//GEN-LAST:event_jmniSairActionPerformed

    private void jmniNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmniNovoActionPerformed
        novoJogo();
    }//GEN-LAST:event_jmniNovoActionPerformed

    private void novoJogo() {
        if (hasGameStarted()) {
            clearBoard();
            setFirstClick(true);
            setGameStarted(false);
            restartGoldCoins();
        }
        iniciarJogo();
        relogio.reiniciar();
        restartMines();
    }
    
    private void initBoard() throws Exception {

        // Criação do BoardMap
        this.boardMap = new BoardMap();
        Cell cell;
        for (int i = 0; i < N_ROWS; i++) {
            for (int j = 0; j < N_COLS; j++) {
                cell = new Cell(new Point(i, j));
                cell.setMyBoard(this);
                this.boardMap.put(cell.getPosition(), cell);
            }
        }
        
        // BoardMap
        // Conectando as células entre si pelo perímetro
        Point point = new Point();
        this.boardMap.forEach((p, c) -> {
            // Superior Esquerda
            point.setLocation(p.x -1, p.y - 1);
            if (boardMap.containsKey(point)) {
                c.getPerimeter().add(boardMap.get(point));
            }
            // Superior
            point.setLocation(p.x, p.y - 1);
            if (boardMap.containsKey(point)) {
                c.getPerimeter().add(boardMap.get(point));
            }
            // Superior Direita
            point.setLocation(p.x + 1, p.y - 1);
            if (boardMap.containsKey(point)) {
                c.getPerimeter().add(boardMap.get(point));
            }
            // Direita
            point.setLocation(p.x + 1, p.y);
            if (boardMap.containsKey(point)) {
                c.getPerimeter().add(boardMap.get(point));
            }
            // Inferior Direita
            point.setLocation(p.x + 1, p.y + 1);
            if (boardMap.containsKey(point)) {
                c.getPerimeter().add(boardMap.get(point));
            }
            // Inferior
            point.setLocation(p.x, p.y + 1);
            if (boardMap.containsKey(point)) {
                c.getPerimeter().add(boardMap.get(point));
            }
            // Inferior Esquerda
            point.setLocation(p.x - 1, p.y + 1);
            if (boardMap.containsKey(point)) {
                c.getPerimeter().add(boardMap.get(point));
            }
            // Esquerda
            point.setLocation(p.x - 1, p.y);
            if (boardMap.containsKey(point)) {
                c.getPerimeter().add(boardMap.get(point));
            }
        });
    }
    
    private void checkBoard() {
        // First, check if all mines were flagmarked successfully.
        if (isGameOn()) {
            if (boardMap.areAllMinesFlagged()) {
                setGameOver(true);
                boardMap.flagRemainingCells();
                boardMap.revealAllCells();
                if (showConfirmationMessage("Parabéns, você encontrou todas as minas!", null)) {
                    novoJogo();
                }
            }
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Board.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Board().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jlabGoldCoins;
    private javax.swing.JLabel jlabMinas;
    private javax.swing.JLabel jlabTempo;
    private javax.swing.JMenu jmnJogo;
    private javax.swing.JMenuBar jmnbMenu;
    private javax.swing.JMenuItem jmniNovo;
    private javax.swing.JMenuItem jmniSair;
    private javax.swing.JPanel jpanMineField;
    private javax.swing.JPanel jpanStatusBar;
    private javax.swing.JPopupMenu.Separator jsSeparador1;
    // End of variables declaration//GEN-END:variables

    private void iniciarJogo() {
        setGameOver(false);
        try {
            initBoard();        
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getLocalizedMessage());
        }
        
        // Através da BoardMap
        this.boardMap.forEach((p, c) -> {
            setInitialCellAtributes(c);
            jpanMineField.add(c, new AbsoluteConstraints(p.x * CELL_SIZE + 5, p.y * CELL_SIZE + 5, -1, -1));
            c.setVisible(true);
        });
        
        this.revalidate();
    }
    
    private void setInitialCellAtributes(Cell cell) {
        cell.setPreferredSize(new Dimension(CELL_SIZE, CELL_SIZE));
        cell.setFocusable(false);
        cell.setBorder(BorderFactory.createBevelBorder(BevelBorder.RAISED));
        cell.setFocusable(false);
        cell.addMouseListener(new CellAdapter());
    }

    private void clearBoard() {
        jpanMineField.removeAll();
    }
    
    public void showAllMines() {
        boardMap.showAllMines();
        if (showConfirmationMessage("Você disparou uma mina! Que pena!", null)) {
            novoJogo();
        }
    }

    private void loadMines(int hPos, int vPos) {
        // Colocando as minas, sempre testando que todas tenham sua célula
        int minesLeft = MINES_QTY, i, j;
        Point aux = new Point();
        ArrayList<Point> positions = boardMap.get(new Point(hPos, vPos)).getPerimeter().getPerimeterPositions();
        positions.add(new Point(hPos, vPos)); // adding cell's own position
        for (; minesLeft > 0;) {
            do {
                i = (int) (Math.random() * (N_ROWS));
                j = (int) (Math.random() * (N_COLS));
                aux.setLocation(i, j);
            } while (positions.contains(aux));
            // Por BoardMap
            if (!boardMap.get(aux).isMine()) {
                boardMap.get(aux).setMine();
                boardMap.get(aux).increasePerimeterNumbers();
                minesLeft--;
            }
        }
    }

    private void restartMines() {
        remainingMines = MINES_QTY;
//        jlabMinas.setText(MENSAGEM_MINAS + String.valueOf(MINES_QTY));
        jlabMinas.setText(MENSAGEM_MINAS + MINES_QTY);
    }

    private boolean showConfirmationMessage(String title, String message) {
        return (JOptionPane.YES_OPTION == JOptionPane.showConfirmDialog(
                this, 
                (message == null) ? "Deseja iniciar nova partida?" : message, 
                title, 
                JOptionPane.YES_NO_OPTION, 
                JOptionPane.QUESTION_MESSAGE));
    }

    private void restartGoldCoins() {
        goldCoins = 0;
        successfulGuesses = 0;
        showGoldCoins();
    }

    protected class CellAdapter extends MouseAdapter  {

        @Override
        public void mousePressed(MouseEvent e) {
            if (!isGameOver()) {
                Cell cell = (Cell) e.getSource();
                // Se foi apenas o esquerdo
                if (SwingUtilities.isLeftMouseButton(e)) {
                    if (isFirstClick()) {
                        loadMines(cell.getHPos(), cell.getVPos());
                        relogio.iniciar();
                        setFirstClick(false);
                        setGameStarted(true);
                    }
                    if (!cell.reveal()){
                        setGameOver(true);
                        setFirstClick(true);
                        showAllMines();
                    }
                    checkBoard();
                } // Se foi apenas o direito
                else if (SwingUtilities.isRightMouseButton(e)) {
                    Cell.Marks lastMark = cell.toggleMark();
                    
                    if (cell.isUncovered() && cell.isNumbered()) {
                        if (goldCoins >= POINT_COST && showConfirmationMessage("Você usará " + String.valueOf(POINT_COST) + " gold coins" , "Quer marcar uma bomba?")) {
                            cell.pointMine();
                            setRemainingMines(true);
                            addGoldCoins(-POINT_COST);
                        }
                    } 
                    if (!cell.isUncovered() && lastMark == Cell.Marks.COVERED && cell.isFlagMarked()) {
                        setRemainingMines(true);
                        if (cell.isMine()) 
                            addSuccesfulGuess(1);
                    }
                    else if (!cell.isUncovered() && lastMark == Cell.Marks.MINEFLAG) {
                        setRemainingMines(false);
                        if (cell.isMine()) 
                            addSuccesfulGuess(-1);
                    }
                    checkBoard();
                } // Se for o do meio
                else if (SwingUtilities.isMiddleMouseButton(e)) {
                    if (cell.isUncovered() && cell.isNumbered()) {
                        if (!cell.revealPerimeter()) {
                            setGameOver(true);
                            setFirstClick(true);
                            showAllMines();
                        }

                        checkBoard();
                    }
                }
            }
        }
    }
    
    protected class BoardMap extends HashMap<Point, Cell>{
        
        /**
         * Filter all cells with mines than check if every each one of them
         * is flag marked.
         * @return true if all of them are. false otherwise.
         */
        public boolean areAllMinesFlagged() {
            Iterator<Cell> cells = values().stream().filter(c -> c.isMine()).iterator();
            Cell minedCell;
            
            while(cells.hasNext()) {
                minedCell = cells.next();
                if (!minedCell.isFlagMarked()) {
                    return false;
                }
            }
            
            return true;
        }
        
        public void showAllMines() {
            values().stream().filter(c -> c.isMine() || c.isFlagMarked()).forEach(c -> {
                c.showMine();
            });
        }
        
        public void revealAllCells() {
            values().stream().filter(c -> !c.isMine() && !c.isUncovered()).forEach(c -> {
                c.reveal();
            });
        }
        
        public void flagRemainingCells() {
            Stream<Cell> covered = values().stream().filter(c -> c.isCovered());
            if (covered.count() == remainingMines) {
                covered.forEach(c -> c.toggleMark());
            }
        }
        
//        public void flagObviousCells() {
//            // Primeiro, separam-se as celulas numeradas e descobertas
//            values().stream().filter(c -> c.isNumbered() && c.isUncovered()).forEach(c -> {
//                // Se a contagem de celulas cobertas do perímetro é igual ao número da célula
//                if (c.getPerimeter().stream().filter(neighbor -> neighbor.getMark().equals(Cell.Marks.COVERED)).count() == c.getNumber()) {
//                    // Aciona todas as células do perímetro
//                    c.getPerimeter().forEach(neighbor -> neighbor.toggleMark());
//                }
//            });
//        }
    }
}
