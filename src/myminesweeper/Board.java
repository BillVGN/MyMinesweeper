/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package myminesweeper;

import java.awt.Dimension;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.BitSet;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.Timer;
import javax.swing.border.BevelBorder;
import org.apache.commons.lang3.time.DurationFormatUtils;
import org.apache.commons.lang3.time.StopWatch;
import org.netbeans.lib.awtextra.AbsoluteConstraints;

/**
 *
 * @author willi
 */
public class Board extends javax.swing.JFrame implements ActionListener {

    public final int N_ROWS = 30;
    public final int N_COLS = 16;
    public final int CELL_SIZE = 25;
    
    public final int MINES_QTY = 99;
    private int remainingMines;
    
    private Cell[][] board;
    
    private boolean gameOver;
    private boolean gameStarted;
    private boolean primeiroClique;
    
    private final StopWatch temporizador;
    private final Timer disparador;
    
    /**
     * Creates new form Board
     */
    public Board() {
        initComponents();
        this.remainingMines = MINES_QTY;
        this.gameOver = true;
        this.gameStarted = false;
        this.primeiroClique = true;
        this.temporizador = new StopWatch();
        this.disparador = new Timer(1000, this);
        this.disparador.start();
    }

    public void setRemainingMines(boolean reduce) {
        if (reduce)
            jlabMinas.setText(jlabMinas.getName() + String.valueOf(--remainingMines));
        else 
            jlabMinas.setText(jlabMinas.getName() + String.valueOf(++remainingMines));
    }
    
    public void setGameOver(boolean val) {
        this.gameOver = val;
        if (val) {
            temporizador.stop();
        }
    }
    
    public boolean isGameOn() {
        return !this.gameOver;
    }
    
    public boolean isFirstClick() {
        return this.primeiroClique;
    }
    
    public void setFirstClick(boolean val) {
        this.primeiroClique = val;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton4 = new javax.swing.JButton();
        jpanMineField = new javax.swing.JPanel();
        jpanStatusBar = new javax.swing.JPanel();
        jlabMinas = new javax.swing.JLabel();
        jlabTempo = new javax.swing.JLabel();
        jmnbMenu = new javax.swing.JMenuBar();
        jmnJogo = new javax.swing.JMenu();
        jmniNovo = new javax.swing.JMenuItem();
        jsSeparador1 = new javax.swing.JPopupMenu.Separator();
        jmniSair = new javax.swing.JMenuItem();

        jButton4.setText("jButton4");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(777, 470));
        setName("Board"); // NOI18N
        setPreferredSize(new java.awt.Dimension(777, 500));
        setSize(new java.awt.Dimension(777, 500));

        jpanMineField.setMinimumSize(new java.awt.Dimension(777, 408));
        jpanMineField.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jpanStatusBar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jpanStatusBar.setMinimumSize(new java.awt.Dimension(700, 30));
        jpanStatusBar.setPreferredSize(new java.awt.Dimension(777, 30));
        jpanStatusBar.setLayout(new java.awt.GridLayout(1, 2, 5, 0));

        jlabMinas.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jlabMinas.setText("Minas Restantes: 0");
        jlabMinas.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        jlabMinas.setName("Minas Restantes: "); // NOI18N
        jpanStatusBar.add(jlabMinas);

        jlabTempo.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jlabTempo.setText("Tempo Transcorrido: 0:00");
        jlabTempo.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 20));
        jlabTempo.setName("Tempo Transcorrido: "); // NOI18N
        jpanStatusBar.add(jlabTempo);

        jmnJogo.setText("Jogo");

        jmniNovo.setText("Novo");
        jmniNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmniNovoActionPerformed(evt);
            }
        });
        jmnJogo.add(jmniNovo);
        jmnJogo.add(jsSeparador1);

        jmniSair.setText("Sair");
        jmniSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmniSairActionPerformed(evt);
            }
        });
        jmnJogo.add(jmniSair);

        jmnbMenu.add(jmnJogo);

        setJMenuBar(jmnbMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpanStatusBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jpanMineField, javax.swing.GroupLayout.PREFERRED_SIZE, 777, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jpanMineField, javax.swing.GroupLayout.PREFERRED_SIZE, 408, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jpanStatusBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jmniSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmniSairActionPerformed
        this.dispose();
    }//GEN-LAST:event_jmniSairActionPerformed

    private void jmniNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmniNovoActionPerformed
        if (this.gameStarted) {
            clearBoard();
            setFirstClick(true);
        }
        iniciarJogo();
        this.temporizador.reset();
        this.jlabTempo.setText(jlabTempo.getName() + "0:00");
        restartMines();
        this.jlabMinas.setText(jlabMinas.getName() + String.valueOf(MINES_QTY));
    }//GEN-LAST:event_jmniNovoActionPerformed

    private void initBoard(int nRows, int nCols) throws Exception {

        // Vamos inverter a criação e manuseio da board
        this.board = new Cell[N_ROWS][N_COLS];
        for (int i = 0; i < N_ROWS; i++) {
            for (int j = 0; j < N_COLS; j++) {
                this.board[i][j] = new Cell(new Point(i, j));
                this.board[i][j].setMyBoard(this);
            }
        }
        
        
        // Conectando as células entre si
        ArrayList<Cell> perimeter = new ArrayList<>(8);
        BitSet checkList = new BitSet(8);
        for (int i = 0; i < nRows; i++) {
            for (int j = 0; j < nCols; j++) {
                // Encostada na esquerda
                if (i == 0) {
                    checkList.set(0, true);
                    checkList.set(6, true);
                    checkList.set(7, true);
                }
                
                // Encostada na direita
                if (i == nRows - 1) {
                    checkList.set(2, true);
                    checkList.set(3, true);
                    checkList.set(4, true);
                }
                
                // Encostada no Topo
                if (j == 0) {
                    checkList.set(0, true);
                    checkList.set(1, true);
                    checkList.set(2, true);
                }
                
                // Encostada no fundo
                if (j == nCols - 1) {
                    checkList.set(4, true);
                    checkList.set(5, true);
                    checkList.set(6, true);
                }
                
                // Itera pelo perimeter para preencher de acordo com a checkList
                Cell aux;
                for (int y = 0; y < 8; y++) {
                    switch (y) {
                        case 0: aux = (!checkList.get(y))? this.board[i - 1][j - 1] : null ; // upperLeft
                            break;
                        case 1: aux = (!checkList.get(y))? this.board[i][j - 1] : null ; // upper
                            break;
                        case 2: aux = (!checkList.get(y))? this.board[i + 1][j - 1] : null ; // upperRight
                            break;
                        case 3: aux = (!checkList.get(y))? this.board[i + 1][j] : null ; // right
                            break;
                        case 4: aux = (!checkList.get(y))? this.board[i + 1][j + 1] : null ; // downRight
                            break;
                        case 5: aux = (!checkList.get(y))? this.board[i][j + 1] : null ; // down
                            break;
                        case 6: aux = (!checkList.get(y))? this.board[i - 1][j + 1] : null ; // downLeft
                            break;
                        case 7: aux = (!checkList.get(y))? this.board[i - 1][j] : null ; // left
                            break;
                        default: aux = null; break;
                    }
                    perimeter.add(y, aux);
                }
                
                // Passa o perimeter para a Cell em questão
                if (!this.board[i][j].setPerimeter(perimeter))
                    throw new Exception("Erro ao inicializar célula(" + String.valueOf(i) + "," + String.valueOf(j) + ")");
                
                // Esvazia o perimeter e reinicia a checkList
                perimeter.clear();
                checkList.clear();
            }
        }
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Board.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Board().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jlabMinas;
    private javax.swing.JLabel jlabTempo;
    private javax.swing.JMenu jmnJogo;
    private javax.swing.JMenuBar jmnbMenu;
    private javax.swing.JMenuItem jmniNovo;
    private javax.swing.JMenuItem jmniSair;
    private javax.swing.JPanel jpanMineField;
    private javax.swing.JPanel jpanStatusBar;
    private javax.swing.JPopupMenu.Separator jsSeparador1;
    // End of variables declaration//GEN-END:variables

    private void iniciarJogo() {
        this.gameOver = false;
        this.gameStarted = true;
        try {
            initBoard(N_ROWS, N_COLS);        
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getLocalizedMessage());
        }
        
        for (int i = 0; i < N_ROWS; i++) {
            for (int j = 0; j < N_COLS; j++) {
                setInitialCellAtributes(this.board[i][j]);
                jpanMineField.add(this.board[i][j], new AbsoluteConstraints(i * CELL_SIZE + 5, j * CELL_SIZE + 5, -1, -1));
                this.board[i][j].setVisible(true);
            }
        }
        
        this.revalidate();
    }
    
    private void setInitialCellAtributes(Cell cell) {
        cell.setPreferredSize(new Dimension(CELL_SIZE, CELL_SIZE));
        cell.setFocusable(false);
        cell.setBorder(BorderFactory.createBevelBorder(BevelBorder.RAISED));
        cell.setFocusable(false);
        cell.addMouseListener(new CellAdapter());
    }

    private void clearBoard() {
        jpanMineField.removeAll();
    }
    
    public void showAllMines() {
        for (int i = 0; i < N_ROWS; i++) {
            for (int j = 0; j < N_COLS; j++) {
                this.board[i][j].showMine();
            }
        }
    }

    private void loadMines(int hPos, int vPos) {
        ArrayList<Point> perimetro = new ArrayList<>();
        perimetro.add(new Point(hPos - 1, vPos - 1)); // upperLeft
        perimetro.add(new Point(hPos    , vPos - 1)); // Top
        perimetro.add(new Point(hPos + 1, vPos - 1)); // upperRight
        perimetro.add(new Point(hPos + 1, vPos    )); // Right
        perimetro.add(new Point(hPos + 1, vPos + 1)); // downRight
        perimetro.add(new Point(hPos    , vPos + 1)); // Bottom
        perimetro.add(new Point(hPos - 1, vPos + 1)); // downLeft
        perimetro.add(new Point(hPos - 1, vPos    )); // Left
        perimetro.add(new Point(hPos    , vPos    )); // Self
        perimetro.stream().filter(p -> (p.getX() < 0 || p.getX() > (N_ROWS - 1) || p.getY() < 0 || p.getY() > (N_COLS - 1))).forEachOrdered(p -> {
            perimetro.remove(p);
        });
        
        // Colocando as minas, sempre testando que todas tenham sua célula
        int minesLeft = MINES_QTY, i, j;
        Point aux = new Point();
        for (; minesLeft > 0;) {
            do {
                i = (int) (Math.random() * (N_ROWS));
                j = (int) (Math.random() * (N_COLS));
                aux.setLocation(i, j);
            } while (perimetro.contains(aux));
            if (!this.board[i][j].isMine()) {
                this.board[i][j].setMine();
                this.board[i][j].increasePerimeterNumbers();
                minesLeft--;
            }
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (this.temporizador.isStarted()) {
            this.jlabTempo.setText(this.jlabTempo.getName() + DurationFormatUtils.formatDuration(temporizador.getTime(), "m:ss", true));
        }
    }

    private void restartMines() {
        remainingMines = MINES_QTY;
    }
    
    protected class CellAdapter extends MouseAdapter  {

        @Override
        public void mousePressed(MouseEvent e) {
            
            if (isGameOn()) {
                Cell cell = (Cell) e.getSource();
                // Se foi apenas o esquerdo
                if (SwingUtilities.isLeftMouseButton(e)) {
                    if (isFirstClick()) {
                        loadMines(cell.getHPos(), cell.getVPos());
                        temporizador.start();
                        setFirstClick(false);
                    }
                    if (!cell.reveal()){
                        setGameOver(true);
                        showAllMines();
                        setFirstClick(true);
                    }
                } // Se foi apenas o direito
                else if (SwingUtilities.isRightMouseButton(e)) {
                    Cell.Marks lastMark = cell.toggleMark();
                    if (lastMark == Cell.Marks.COVERED && cell.isFlagMarked())
                        setRemainingMines(true);
                    else if (lastMark == Cell.Marks.MINEFLAG)
                        setRemainingMines(false);
                } // Se for o do meio
                else if (SwingUtilities.isMiddleMouseButton(e)) {
                    if (!cell.revealPerimeter()) {
                        setGameOver(true);
                        showAllMines();
                        setFirstClick(true);
                    }
                }
            }
        }
    }
}
